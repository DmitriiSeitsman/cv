// üåê scripts.js ‚Äî –æ–±—â–∏–π header, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞ –∏ –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é

const langData = {
  ru: {
    title: "–î–º–∏—Ç—Ä–∏–π –°–µ–π—Ü–º–∞–Ω ‚Äî iOS –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    footer: "¬© 2025 –î–º–∏—Ç—Ä–∏–π –°–µ–π—Ü–º–∞–Ω. –°–∞–π—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ —á–∏—Å—Ç–æ–º HTML, JS –∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π. üôÇ",
  },
  en: {
    title: "Dmitrii Seitsman ‚Äî iOS Developer",
    footer: "¬© 2025 Dmitrii Seitsman. Built with pure HTML, JS, and a pinch of AI. üôÇ",
  },
};

let currentLang = localStorage.getItem("lang") || "ru";

// ‚Äî‚Äî‚Äî‚Äî‚Äî helpers ‚Äî‚Äî‚Äî‚Äî‚Äî
function setActiveNav() {
  const here = location.pathname.split("/").pop() || "index.html";
  document.querySelectorAll(".main-nav a").forEach((a) => {
    const href = a.getAttribute("href");
    a.classList.toggle("active", href === here);
  });
}

function setLanguage(lang) {
  currentLang = lang;
  localStorage.setItem("lang", lang);
  document.documentElement.lang = lang;

  // title + footer
  document.title = langData[lang].title;
  const footer = document.querySelector("footer");
  if (footer) footer.textContent = langData[lang].footer;

  // üî§ –∏–º—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–ø–µ—Ä–µ–≤–æ–¥)
  const nameEl = document.getElementById("name");
  if (nameEl) {
    nameEl.textContent = lang === "ru" ? "–î–º–∏—Ç—Ä–∏–π –°–µ–π—Ü–º–∞–Ω" : "Dmitrii Seitsman";
  }

  // –∞–∫—Ç–∏–≤–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
  const btnRu = document.getElementById("btn-ru");
  const btnEn = document.getElementById("btn-en");
  if (btnRu && btnEn) {
    btnRu.classList.toggle("active", lang === "ru");
    btnEn.classList.toggle("active", lang === "en");
  }

  // –ø–µ—Ä–µ–≤–æ–¥ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –ø–æ data-–∞—Ç—Ä–∏–±—É—Ç–∞–º
  document.querySelectorAll(".main-nav a").forEach((link) => {
    const text = link.getAttribute(`data-${lang}`);
    if (text) link.textContent = text;
  });

  // –æ–ø–æ–≤–µ—Å—Ç–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
  document.dispatchEvent(new CustomEvent("langchange", { detail: { lang } }));
}

function initMobileMenu() {
  const toggle = document.querySelector(".menu-toggle");
  const nav = document.querySelector(".main-nav");
  const overlay = document.getElementById("nav-overlay");
  if (!toggle || !nav) return;

  const openMenu = () => {
    nav.classList.add("open");
    document.body.classList.add("menu-open");
    overlay?.classList.add("active");
    toggle.setAttribute("aria-expanded", "true");
  };

  const closeMenu = () => {
    nav.classList.remove("open");
    document.body.classList.remove("menu-open");
    overlay?.classList.remove("active");
    toggle.setAttribute("aria-expanded", "false");
  };

  toggle.addEventListener("click", () => {
    const isOpen = nav.classList.contains("open");
    isOpen ? closeMenu() : openMenu();
  });

  overlay?.addEventListener("click", closeMenu);

  nav.addEventListener("click", (e) => {
    if (e.target.closest("a")) closeMenu();
  });

  const mq = window.matchMedia("(min-width: 769px)");
  if (mq.addEventListener) {
    mq.addEventListener("change", (e) => e.matches && closeMenu());
  } else if (mq.addListener) {
    mq.addListener((e) => e.matches && closeMenu());
  }
}

function wireLangButtons() {
  const btnRu = document.getElementById("btn-ru");
  const btnEn = document.getElementById("btn-en");
  btnRu?.addEventListener("click", () => setLanguage("ru"));
  btnEn?.addEventListener("click", () => setLanguage("en"));
}

// ‚Äî‚Äî‚Äî‚Äî‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ header ‚Äî‚Äî‚Äî‚Äî‚Äî
async function ensureHeaderLoaded() {
  if (document.querySelector("header.site-header")) return;

  const host = document.createElement("div");
  document.body.insertBefore(host, document.body.firstChild);

  try {
    const res = await fetch("/header.html", { cache: "no-store" });

    // GitHub Pages –∏–Ω–æ–≥–¥–∞ –æ—Ç–¥–∞—ë—Ç "opaque" (–±–µ–∑ .ok)
    if (!res.ok && res.type !== "opaque") {
      throw new Error(`Header fetch failed: ${res.status}`);
    }

    const html = await res.text();
    if (!html.trim()) {
      throw new Error("Header file is empty or not loaded");
    }

    host.innerHTML = html;
  } catch (err) {
    console.warn("‚ö†Ô∏è Header not loaded:", err);
  }
}

// ‚Äî‚Äî‚Äî‚Äî‚Äî bootstrap ‚Äî‚Äî‚Äî‚Äî‚Äî
document.addEventListener("DOMContentLoaded", async () => {
  await ensureHeaderLoaded();  // –∑–∞–≥—Ä—É–∑–∏–º –æ–±—â–∏–π header, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  wireLangButtons();           // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ RU/EN
  initMobileMenu();            // –±—É—Ä–≥–µ—Ä
  setActiveNav();              // –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  setLanguage(currentLang);    // –ø—Ä–∏–º–µ–Ω–∏–º —è–∑—ã–∫ (title, footer, –∏–º—è, –º–µ–Ω—é)
});